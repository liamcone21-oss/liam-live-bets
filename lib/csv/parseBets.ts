import Papa from 'papaparse'; import { americanToDecimal } from '@/lib/odds';
export type RawCSV=string|File|Blob; export type ParsedBet={book:string;sport:string;league:string;eventId:string;eventName:string;market:string;selection:string;oddsAmerican:number;oddsDecimal:number;stake:number;toWin:number;placedAt:string;notes?:string;};
export async function parseCSV(raw:RawCSV):Promise<ParsedBet[]>{const text=typeof raw==='string'?raw:await (raw as Blob).text(); const {data}=Papa.parse<Record<string,string>>(text,{header:true,skipEmptyLines:true}); if(data[0]){if(has(data[0],'wager type')&&(has(data[0],'odds')||has(data[0],'american odds'))) return mapDK(data as any); if((has(data[0],'bet type')||has(data[0],'wager type'))&&(has(data[0],'american odds')||has(data[0],'odds'))&&has(data[0],'placed')) return mapFD(data as any); if((has(data[0],'wager')||has(data[0],'bet type'))&&(has(data[0],'risk')||has(data[0],'stake'))&&(has(data[0],'win')||has(data[0],'to win'))) return mapAB(data as any); if((has(data[0],'ticket no')||has(data[0],'ticket'))&&(has(data[0],'accepted')||has(data[0],'placed'))&&(has(data[0],'risk')||has(data[0],'stake'))) return mapWH(data as any);} throw new Error('Unknown CSV format'); }
const money=(x?:string)=>Number(String(x||'').replace(/[$,]/g,''))||0; const intval=(x?:string)=>parseInt(String(x||'').replace(/[^\d-]/g,''),10)||0; const has=(h:Record<string,string>,key:string)=>Object.keys(h).some(k=>k.toLowerCase().includes(key));
function mapDK(rows:Record<string,string>[]):ParsedBet[]{return rows.map(r=>{const am=intval(r['American Odds']||r['Odds']);const stake=money(r['Stake']||r['Bet Amount']);const toWin=money(r['To Win']||r['Potential Payout'])-stake||money(r['Potential Winnings']);const eventName=r['Event']||r['Game']||r['Leg Description']||'Unknown Event';const league=(r['League']||r['Sport']||'').toUpperCase();return{book:'DraftKings',sport:league.includes('NFL')?'Football':league,league,eventId:r['Game ID']||r['Event ID']||eventName,eventName,market:r['Wager Type']||r['Market']||'Bet',selection:r['Selection']||r['Bet Description']||r['Outcome']||'Pick',oddsAmerican:am,oddsDecimal:americanToDecimal(am||-110),stake,toWin:toWin>0?toWin:Math.max(0,stake*(americanToDecimal(am||-110)-1)),placedAt:new Date(r['Placed Date']||r['Placed At']||r['Date']).toISOString(),notes:r['Ticket #']?`Ticket ${r['Ticket #']}`:undefined}})}
function mapFD(rows:Record<string,string>[]):ParsedBet[]{return rows.map(r=>{const am=intval(r['American Odds']||r['Odds']);const stake=money(r['Stake']||r['Bet Amount']||r['Wager']);const toWin=money(r['To Win']||r['Potential Winnings']);const eventName=r['Event']||r['Game']||r['Leg']||r['Description']||'Unknown Event';const league=(r['League']||r['Sport']||'').toUpperCase();return{book:'FanDuel',sport:league.includes('NFL')?'Football':league,league,eventId:r['Event ID']||eventName,eventName,market:r['Bet Type']||r['Wager Type']||'Bet',selection:r['Selection']||r['Pick']||r['Outcome']||'Pick',oddsAmerican:am,oddsDecimal:americanToDecimal(am||-110),stake,toWin:toWin>0?toWin:Math.max(0,stake*(americanToDecimal(am||-110)-1)),placedAt:new Date(r['Placed']||r['Placed Date']).toISOString(),notes:r['Bet ID']?`Bet ${r['Bet ID']}`:undefined}})}
function mapAB(rows:Record<string,string>[]):ParsedBet[]{return rows.map(r=>{const am=intval(r['American Odds']||r['Odds']||r['Price']);const stake=money(r['Risk']||r['Stake']||r['Amount']);const toWin=money(r['Win']||r['To Win']||r['Payout'])||Math.max(0,stake*(americanToDecimal(am||-110)-1));const eventName=r['Event']||r['Match']||r['Game']||`${r['Team']||r['Selection']||'Selection'}`;const league=(r['League']||r['Sport']||'').toUpperCase()||'UNKNOWN';return{book:'AnyBet365',sport:league.includes('NFL')?'Football':league,league,eventId:r['Event ID']||r['Rotation']||eventName,eventName,market:r['Wager']||r['Bet Type']||r['Market']||'Bet',selection:r['Selection']||r['Team']||r['Side']||'Pick',oddsAmerican:am||-110,oddsDecimal:americanToDecimal(am||-110),stake,toWin,placedAt:new Date(r['Placed']||r['Date']||r['Placed At']).toISOString(),notes:r['Ticket']?`Ticket ${r['Ticket']}`:undefined}})}
function mapWH(rows:Record<string,string>[]):ParsedBet[]{return rows.map(r=>{const am=intval(r['American Odds']||r['Odds']||r['Price']);const stake=money(r['Risk']||r['Stake']);const toWin=money(r['Win']||r['To Win']);const eventName=r['Event']||r['Match']||r['Game']||`${r['Home']||'Home'} vs ${r['Away']||'Away'}`;const league=(r['League']||r['Sport']||'').toUpperCase()||'UNKNOWN';return{book:'WagerHouse247',sport:league.includes('NFL')?'Football':league,league,eventId:r['Ticket No']||r['Ticket']||r['Event ID']||eventName,eventName,market:r['Type']||r['Wager Type']||r['Market']||'Bet',selection:r['Selection']||r['Pick']||r['Side']||'Pick',oddsAmerican:am||-110,oddsDecimal:americanToDecimal(am||-110),stake,toWin:toWin>0?toWin:Math.max(0,stake*(americanToDecimal(am||-110)-1)),placedAt:new Date(r['Accepted']||r['Placed']||r['Date']).toISOString(),notes:r['Ticket No']?`Ticket ${r['Ticket No']}`:undefined}})}
